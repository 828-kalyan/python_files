# Expense Tracker Application
expenses = {}

# Function to add an expense
def add_expense():
    category = input("Enter expense category: ").capitalize()  # Capitalize to handle case sensitivity
    amount = float(input("Enter expense amount: "))
    
    # If the category already exists, append the new expense to it
    if category in expenses:
        expenses[category].append(amount)
    else:
        expenses[category] = [amount]
    
    print(f"Expense added under {category} category!\n")

# Function to view all expenses
def view_expenses():
    print("\nExpenses:")
    print("-" * 30)
    print("Category      | Amount")
    print("-" * 30)
    
    for category, amounts in expenses.items():
        for amount in amounts:
            print(f"{category:<15} | {amount:.2f}")
    
    total = sum([sum(amounts) for amounts in expenses.values()])
    print("-" * 30)
    print(f"Total         | {total:.2f}\n")

# Function to view summary of expenses by category
def view_summary():
    print("\nExpense Summary:")
    print("-" * 30)
    
    total = 0
    for category, amounts in expenses.items():
        category_total = sum(amounts)
        print(f"{category}: {category_total:.2f}")
        total += category_total
    
    print("-" * 30)
    print(f"Total Expenses: {total:.2f}\n")

# Main menu and user interaction
def main():
    while True:
        print("Welcome to the Expense Tracker!\n")
        print("1. Add Expense")
        print("2. View Expenses")
        print("3. View Summary")
        print("4. Exit")
        choice = input("\nChoose an option: ")

        if choice == '1':
            add_expense()
        elif choice == '2':
            view_expenses()
        elif choice == '3':
            view_summary()
        elif choice == '4':
            print("Goodbye!")
            break
        else:
            print("Invalid option. Please try again.\n")

if __name__ == "__main__":
    main()
Expense Tracker
Problem: Many people struggle to keep track of their personal finances.
Solution: Create a console-based app that helps users input their income and expenses, categorizes them, and provides monthly reports, budget analysis, and savings goals.
Features:
Add income and expense categories.
Calculate monthly spending.
Track savings and investments.
Generate monthly or yearly reports.

Possible Enhancements:

Save and load data from a file (e.g., a CSV or JSON file) so that expenses persist between runs.
Add monthly and yearly reports.
Allow the user to set budget limits for categories and get alerts.
